useDynLib(DMCfun, .registration=TRUE)
exportPattern("addDataDF")
exportPattern("addErrorBars")
exportPattern("calculateCAF")
exportPattern("calculateDelta")
exportPattern("calculateCostValueRMSE")
exportPattern("calculateCostValueSPE")
exportPattern("calculateCostValueGS")
exportPattern("calculateCostValueCS")
exportPattern("calculateBinProbabilities")
exportPattern("createDF")
exportPattern("dmcCombineObservedData")
exportPattern("dmcFit")
exportPattern("dmcFitDE")
exportPattern("dmcFitSubject")
exportPattern("dmcFitSubjectDE")
exportPattern("dmcObservedData")
exportPattern("dmcSim")
exportPattern("dmcSims")
exportPattern("errDist")
exportPattern("rtDist")
importFrom("Rcpp", "evalCpp")
importFrom("stats", "runif", "rnorm", "sd", "quantile", "rbeta", "ecdf", "density", "setNames", "optim")
importFrom("graphics", "plot", "lines", "layout", "par", "axis", "legend", "abline")
importFrom("grDevices", "dev.off", "pdf", "colorRampPalette")
importFrom("utils", "read.table", "modifyList", "txtProgressBar", "setTxtProgressBar", "tail")
importFrom("dplyr", "n", "group_by", "summarize", "mutate", "ntile", "%>%")
importFrom("tidyr", "pivot_wider")
importFrom("parallel", "detectCores", "makeCluster", "stopCluster")
importFrom("pbapply", "pblapply")
S3method("[", dmclist)
S3method(plot, dmcsim)
S3method(plot, dmcfit)
S3method(plot, dmcob)
S3method(plot, dmcobs)
S3method(plot, dmclist)
S3method(summary, dmcsim)
S3method(summary, dmcfit)
S3method(mean, dmcfit)
